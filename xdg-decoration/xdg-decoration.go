// package wl acts as a client for the xdg_decoration_unstable_v1 wayland protocol.

// generated by wl-scanner
// https://github.com/dkolbly/wl-scanner
// from: xdg-decoration-unstable-v1.xml
// on 2019-04-07 03:03:52 +0100
package xdgdecoration

import (
	"sync"

	"github.com/malcolmstill/wl"
	"github.com/malcolmstill/wl/zxdgv6"
)

type ZxdgDecorationManagerV1DestroyEvent struct {
}

type ZxdgDecorationManagerV1DestroyHandler interface {
	HandleZxdgDecorationManagerV1Destroy(ZxdgDecorationManagerV1DestroyEvent)
}

func (p *ZxdgDecorationManagerV1) AddDestroyHandler(h ZxdgDecorationManagerV1DestroyHandler) {
	if h != nil {
		p.mu.Lock()
		p.destroyHandlers = append(p.destroyHandlers, h)
		p.mu.Unlock()
	}
}

func (p *ZxdgDecorationManagerV1) RemoveDestroyHandler(h ZxdgDecorationManagerV1DestroyHandler) {
	p.mu.Lock()
	defer p.mu.Unlock()

	for i, e := range p.destroyHandlers {
		if e == h {
			p.destroyHandlers = append(p.destroyHandlers[:i], p.destroyHandlers[i+1:]...)
			break
		}
	}
}

type ZxdgDecorationManagerV1GetToplevelDecorationEvent struct {
	Id       *ZxdgToplevelDecorationV1
	Toplevel *zxdgv6.ZxdgToplevelV6
}

type ZxdgDecorationManagerV1GetToplevelDecorationHandler interface {
	HandleZxdgDecorationManagerV1GetToplevelDecoration(ZxdgDecorationManagerV1GetToplevelDecorationEvent)
}

func (p *ZxdgDecorationManagerV1) AddGetToplevelDecorationHandler(h ZxdgDecorationManagerV1GetToplevelDecorationHandler) {
	if h != nil {
		p.mu.Lock()
		p.getToplevelDecorationHandlers = append(p.getToplevelDecorationHandlers, h)
		p.mu.Unlock()
	}
}

func (p *ZxdgDecorationManagerV1) RemoveGetToplevelDecorationHandler(h ZxdgDecorationManagerV1GetToplevelDecorationHandler) {
	p.mu.Lock()
	defer p.mu.Unlock()

	for i, e := range p.getToplevelDecorationHandlers {
		if e == h {
			p.getToplevelDecorationHandlers = append(p.getToplevelDecorationHandlers[:i], p.getToplevelDecorationHandlers[i+1:]...)
			break
		}
	}
}

func (p *ZxdgDecorationManagerV1) Dispatch(event *wl.Event) {
	switch event.Opcode {
	case 0:
		if len(p.destroyHandlers) > 0 {
			ev := ZxdgDecorationManagerV1DestroyEvent{}
			p.mu.RLock()
			for _, h := range p.destroyHandlers {
				h.HandleZxdgDecorationManagerV1Destroy(ev)
			}
			p.mu.RUnlock()
		}
	case 1:
		if len(p.getToplevelDecorationHandlers) > 0 {
			ev := ZxdgDecorationManagerV1GetToplevelDecorationEvent{}
			ev.Id = NewZxdgToplevelDecorationV1(p.Context(), int(event.Uint32()))
			ev.Toplevel = event.Proxy(p.Context()).(*zxdgv6.ZxdgToplevelV6)
			p.mu.RLock()
			for _, h := range p.getToplevelDecorationHandlers {
				h.HandleZxdgDecorationManagerV1GetToplevelDecoration(ev)
			}
			p.mu.RUnlock()
		}
	}
}

type ZxdgDecorationManagerV1 struct {
	wl.BaseProxy
	mu                            sync.RWMutex
	destroyHandlers               []ZxdgDecorationManagerV1DestroyHandler
	getToplevelDecorationHandlers []ZxdgDecorationManagerV1GetToplevelDecorationHandler
}

func NewZxdgDecorationManagerV1(ctx *wl.Context, id int) *ZxdgDecorationManagerV1 {
	ret := new(ZxdgDecorationManagerV1)
	ctx.RegisterId(ret, id)
	return ret
}

type ZxdgToplevelDecorationV1DestroyEvent struct {
}

type ZxdgToplevelDecorationV1DestroyHandler interface {
	HandleZxdgToplevelDecorationV1Destroy(ZxdgToplevelDecorationV1DestroyEvent)
}

func (p *ZxdgToplevelDecorationV1) AddDestroyHandler(h ZxdgToplevelDecorationV1DestroyHandler) {
	if h != nil {
		p.mu.Lock()
		p.destroyHandlers = append(p.destroyHandlers, h)
		p.mu.Unlock()
	}
}

func (p *ZxdgToplevelDecorationV1) RemoveDestroyHandler(h ZxdgToplevelDecorationV1DestroyHandler) {
	p.mu.Lock()
	defer p.mu.Unlock()

	for i, e := range p.destroyHandlers {
		if e == h {
			p.destroyHandlers = append(p.destroyHandlers[:i], p.destroyHandlers[i+1:]...)
			break
		}
	}
}

type ZxdgToplevelDecorationV1SetModeEvent struct {
	Mode uint32
}

type ZxdgToplevelDecorationV1SetModeHandler interface {
	HandleZxdgToplevelDecorationV1SetMode(ZxdgToplevelDecorationV1SetModeEvent)
}

func (p *ZxdgToplevelDecorationV1) AddSetModeHandler(h ZxdgToplevelDecorationV1SetModeHandler) {
	if h != nil {
		p.mu.Lock()
		p.setModeHandlers = append(p.setModeHandlers, h)
		p.mu.Unlock()
	}
}

func (p *ZxdgToplevelDecorationV1) RemoveSetModeHandler(h ZxdgToplevelDecorationV1SetModeHandler) {
	p.mu.Lock()
	defer p.mu.Unlock()

	for i, e := range p.setModeHandlers {
		if e == h {
			p.setModeHandlers = append(p.setModeHandlers[:i], p.setModeHandlers[i+1:]...)
			break
		}
	}
}

type ZxdgToplevelDecorationV1UnsetModeEvent struct {
}

type ZxdgToplevelDecorationV1UnsetModeHandler interface {
	HandleZxdgToplevelDecorationV1UnsetMode(ZxdgToplevelDecorationV1UnsetModeEvent)
}

func (p *ZxdgToplevelDecorationV1) AddUnsetModeHandler(h ZxdgToplevelDecorationV1UnsetModeHandler) {
	if h != nil {
		p.mu.Lock()
		p.unsetModeHandlers = append(p.unsetModeHandlers, h)
		p.mu.Unlock()
	}
}

func (p *ZxdgToplevelDecorationV1) RemoveUnsetModeHandler(h ZxdgToplevelDecorationV1UnsetModeHandler) {
	p.mu.Lock()
	defer p.mu.Unlock()

	for i, e := range p.unsetModeHandlers {
		if e == h {
			p.unsetModeHandlers = append(p.unsetModeHandlers[:i], p.unsetModeHandlers[i+1:]...)
			break
		}
	}
}

func (p *ZxdgToplevelDecorationV1) Dispatch(event *wl.Event) {
	switch event.Opcode {
	case 0:
		if len(p.destroyHandlers) > 0 {
			ev := ZxdgToplevelDecorationV1DestroyEvent{}
			p.mu.RLock()
			for _, h := range p.destroyHandlers {
				h.HandleZxdgToplevelDecorationV1Destroy(ev)
			}
			p.mu.RUnlock()
		}
	case 1:
		if len(p.setModeHandlers) > 0 {
			ev := ZxdgToplevelDecorationV1SetModeEvent{}
			ev.Mode = event.Uint32()
			p.mu.RLock()
			for _, h := range p.setModeHandlers {
				h.HandleZxdgToplevelDecorationV1SetMode(ev)
			}
			p.mu.RUnlock()
		}
	case 2:
		if len(p.unsetModeHandlers) > 0 {
			ev := ZxdgToplevelDecorationV1UnsetModeEvent{}
			p.mu.RLock()
			for _, h := range p.unsetModeHandlers {
				h.HandleZxdgToplevelDecorationV1UnsetMode(ev)
			}
			p.mu.RUnlock()
		}
	}
}

type ZxdgToplevelDecorationV1 struct {
	wl.BaseProxy
	mu                sync.RWMutex
	destroyHandlers   []ZxdgToplevelDecorationV1DestroyHandler
	setModeHandlers   []ZxdgToplevelDecorationV1SetModeHandler
	unsetModeHandlers []ZxdgToplevelDecorationV1UnsetModeHandler
}

func NewZxdgToplevelDecorationV1(ctx *wl.Context, id int) *ZxdgToplevelDecorationV1 {
	ret := new(ZxdgToplevelDecorationV1)
	ctx.RegisterId(ret, id)
	return ret
}

// Configure will suggest a surface change.
//
//
// The configure event asks the client to change its decoration mode. The
// configured state should not be applied immediately. Clients must send an
// ack_configure in response to this event. See xdg_surface.configure and
// xdg_surface.ack_configure for details.
//
// A configure event can be sent at any time. The specified mode must be
// obeyed by the client.
//
func (p *ZxdgToplevelDecorationV1) Configure(mode uint32) error {
	return p.Context().SendRequest(p, 0, mode)
}

const (
	ZxdgToplevelDecorationV1ErrorUnconfiguredBuffer = 0
	ZxdgToplevelDecorationV1ErrorAlreadyConstructed = 1
	ZxdgToplevelDecorationV1ErrorOrphaned           = 2
)

const (
	ZxdgToplevelDecorationV1ModeClientSide = 1
	ZxdgToplevelDecorationV1ModeServerSide = 2
)
